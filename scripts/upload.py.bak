#encoding:utf-8
import requests
import os
import time
import sys
import qrcode

reload(sys)
sys.setdefaultencoding('utf-8')

USER_KEY = "a71b74e2be4b5db809b03e3f361df0b2"
API_KEY = "c0d43f1836718811f8973ed707deaa07"
PGYER_UPLOAD_URL = "https://www.pgyer.com/apiv2/app/upload"
IOS_INSTALL_API = r"itms-services://?action=download-manifest&url=https://www.pgyer.com/app/plist/{aKey}"



def uploadToPgyer(ipaPath, updateDescription,isIos):
    print "Begin to upload apk to Pgyer: %s" % ipaPath
    headers = {'enctype': 'multipart/form-data'}
    payload = {
        'uKey': USER_KEY,
        '_api_key': API_KEY,
        'publishRange': '2', 
        'isPublishToPublic': '2', 
        'buildUpdateDescription': updateDescription  
    }
    try_times = 0
    while try_times < 3:
        try:
            print "uploading ..."
            ipa_file = {'file': open(ipaPath, 'rb')}
            r = requests.post(PGYER_UPLOAD_URL,
                headers = headers,
                files = ipa_file,
                data = payload,
                verify = False
            )
            break
        except requests.exceptions.ConnectionError:
            print "requests.exceptions.ConnectionError occured!"
            time.sleep(5)
            print "try again ..."
            try_times += 1
        except Exception as e:
            print "Exception occured: %s" % str(e)
            time.sleep(5)
            print "try again ..."
            try_times += 1
    
    if r.status_code == requests.codes.ok:
         result = r.json()
         #appQRCodeURL = parseUploadResult(result)
         appQRCodeURL = result['data']['appQRCodeURL']
         buildNumber = os.getenv("BUILD_NUMBER")
         downloadPath = ""
         if isIos == True:
             appKey = getIOSAppKey(result)
             IOSInstallAddr = IOS_INSTALL_API.format(aKey=appKey)
             img = qrcode.make(IOSInstallAddr)
             print "build ios now ..."
             #downloadPath = jenkinsHome + "/war/images/ios/" + buildNumber
             if sys.argv[2] == "LST":
                downloadPath = workspace + "/TrainApp/build/"
             elif sys.argv[2] == "FS":
                downloadPath = workspace + "/build/"
             img.save(downloadPath+ "IOSQRCode.png")



         else:
             #downloadPath = jenkinsHome+"/war/images/android/"+buildNumber
             downloadPath = workspace +"/app/build/outputs/"

         if (not os.path.exists(downloadPath)):
             os.makedirs(downloadPath)
         print "download path is:" + downloadPath
         print "qrcode url is:",appQRCodeURL
         downloadQRCodeImage(appQRCodeURL, downloadPath)

         print appQRCodeURL
    else:
        print 'HTTPError, response: %s' % r.content
def parseUploadResult(jsonResult):
    print 'post response: %s' % jsonResult
    resultCode = jsonResult['code']
    if resultCode == 0:
        print "Upload Success"
        appKey = jsonResult['data']['appKey']
        print "appDownloadPage: http://www.pgyer.com/%s" % appKey

        appDownloadPage = "http://www.pgyer.com/%s" % appKey

        headers = {'enctype': 'multipart/form-data'}
        payload = {
            'uKey': USER_KEY,
            '_api_key': API_KEY,
            'publishRange': '2',
            'isPublishToPublic': '2',
            'updateDescription': "test"
        }

        ipa_file = {'file': open(appname, 'rb')}
        requests.post(PGYER_UPLOAD_URL,
                          headers=headers,
                          files=ipa_file,
                          data=payload,
                          verify=False
                          )

        r = requests.get(appDownloadPage, verify=False)
        matchText = "static.pgyer.com/app/qrcodeHistory"
        startIndex = r.text.find(matchText)
        #baseLen = len("o1wjx1evz.qnssl.com/app/qrcodeHistory")
        baseLen = len(matchText)
        endLen = len("1e66cb853f50812c6ff94fc18d5b905a31c6061638a8bb817d1da2d49ac31875")
       # print r.text
        appQRCodeURL = r.text[startIndex:startIndex + baseLen + endLen + 1]
        appQRCodeURL = "http://"+appQRCodeURL
        print "appQRCodeUrl:%s"%appQRCodeURL
        #appQRCodeURL = jsonResult['data']['appQRCodeURL']
        return appQRCodeURL
    else:
        print "Upload Fail!"
        print "Reason: %s" % jsonResult['message']
        raise
def getIOSAppKey(jsonResult):
    resultCode = jsonResult['code']
    if resultCode == 0:
        print "Upload Success"
        appKey = jsonResult['data']['appKey']
        return appKey
    return ""

def downloadQRCodeImage(appQRCodeURL, saveFolder):
    qr_image_file_path = os.path.join(saveFolder, 'QRCode.png')
    response = requests.get(appQRCodeURL,verify=False)
    if response.status_code == 200:
        with open(qr_image_file_path, 'wb') as f:
            f.write(response.content)
    print 'save QRCode image to file: %s' % qr_image_file_path


def uploadtoFir(apkname):
    print "start to upload to fir"
    cmd = "fir p " + apkname +" -Q -T a1a6dc2985c53727d9609cf87af0d572"
    print cmd
    
    print os.popen(cmd).read()
    output_dir = os.path.join(workspace,"app\\build\\outputs\\apk\\")
    print output_dir
    for filename in os.listdir(output_dir):
  

            if filename.startswith("fir"):
                qrimagename = os.path.join(output_dir,filename)
                if(os.path.exists(output_dir+"/fir.png")):
                    os.remove(output_dir+"/fir.png")
                os.rename(qrimagename,output_dir+"/fir.png")
                break
   
    buildNumber = os.getenv("BUILD_NUMBER")
    targetImage = os.path.join(workspace,"war\\images\\"+buildNumber+"\fir.png")
    if(os.path.exists(targetImage)):
        os.remove(targetImage)
    os.mkdir(os.path.join(jenkinsHome,"war\\images\\"+buildNumber))
    cmd_copy = "copy " + output_dir+"fir.png" + " "+ os.path.join(jenkinsHome,"war\\images\\"+buildNumber+"\\")
    print cmd_copy
    print os.popen(cmd_copy).read()


def makeQRCode(appname,isIos):
    if isIos == True:
        print "build ios now ..."
        QRCodePath = "/TrainApp/build/"
    else:
        QRCodePath = "app/build/outputs/apk/"

    if (not os.path.exists(QRCodePath)):
        os.makedirs(QRCodePath)
    

    appDownloadUrl = os.getenv("BUILD_URL")+"/artifact"+QRCodePath+os.path.basename(appname)

    img = qrcode.make(appDownloadUrl)


    img.save(workspace+QRCodePath+"QRCode1.png")

if __name__ == '__main__':

    print os.getenv("BUILD_NUMBER")
    workspace = os.getenv("WORKSPACE")
    jenkinsHome = os.getenv("JENKINS_HOME")
    if sys.argv[1] == "IOS":
        if sys.argv[2] == "LST":
            appname = os.path.join(workspace,"TrainApp/build/app.ipa")
            uploadToPgyer(appname, "LiangShitong",True)
        elif sys.argv[2] == "FS":
            appname = os.path.join(workspace,"build/app.ipa")
            uploadToPgyer(appname, "FaceShow",True)
        #makeQRCode(appname,True)
    elif sys.argv[1] == "Android":
        if sys.argv[2] == "LST":
            appname = os.path.join(workspace,"app/build/outputs/apk/app-yanxiu_com-release.apk")
            uploadToPgyer(appname, "LiangShitong",False)
        elif sys.argv[2] == "FS":
            appname = os.path.join(workspace,"app/build/outputs/apk/release/app-release.apk")
            uploadToPgyer(appname, "FaceShow",False)
        #makeQRCode(appname,False)
    #uploadtoFir(apkname)
